{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/js-immutability","result":{"data":{"markdownRemark":{"id":"ce02b5b0-e859-57ed-a22a-22060101b0de","html":"<h1 id=\"immutability\" style=\"position:relative;\"><a href=\"#immutability\" aria-label=\"immutability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Immutability</h1>\n<h3 id=\"primitive-types--immutable\" style=\"position:relative;\"><a href=\"#primitive-types--immutable\" aria-label=\"primitive types  immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive Types : Immutable</h3>\n<ul>\n<li>Boolean</li>\n<li>null</li>\n<li>undefined</li>\n<li>Number</li>\n<li>String</li>\n<li>Symbol</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span></code></pre></div>\n<p>이렇게 하면 hello 문자열이 변경되는 게 아니라 world가 새로 메모리에 할당되는 것 </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> statement <span class=\"token operator\">=</span> <span class=\"token string\">'I am an immutable value'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string은 immutable value</span>\n<span class=\"token keyword\">let</span> otherStr <span class=\"token operator\">=</span> statement<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 하면 statement가 가리키는 문자열을 변경한 것이 아니라 해당 문자열을 가지고 만든 새로운 문자열을 메모리에 할당 </p>\n<h3 id=\"object-types-mutable\" style=\"position:relative;\"><a href=\"#object-types-mutable\" aria-label=\"object types mutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Types: Mutable</h3>\n<p>객체는 참조 형태로 전달하고 전달 받는다 ⇒ 그 상태가 변경될 수 있다 </p>\n<p>⇒ 레퍼런스를 참조한 다른 객체에서 객체를 변경할 때 의도치 않은 변경으로 문제 발생</p>\n<ul>\n<li>mutable value는 값에 대한 메모리 주소를 참조하기 때문에 값을 변경했을 경우 해당 값을 사용하고 있는 모든 곳에서 side effect(부수 효과)가 발생하여 예상치 못한 버그를 유발할 수 있음</li>\n<li>\n<p>해결 방법</p>\n<ul>\n<li>\n<p>불변 객체로 만들어 프로퍼티 변경을 방지하기</p>\n<ul>\n<li>변경이 필요한 경우에는 객체의 방어적 복사 (spread operator, object.assign 사용) 를 통해 새로운 객체를 생성</li>\n<li>Observer 패턴으로 변경에 대응</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>immutable로 객체를 선언하고 사용하게 되면 객체의 메모리 주소가 불변</p>\n<ul>\n<li>구조를 단순하게 유지</li>\n<li>\n<p>구조적인 공유</p>\n<ul>\n<li>어플리케이션 동작의 예측</li>\n<li>내부적으로 구조를 공유하고 있기 때문에 메모리 사용량 감소</li>\n</ul>\n</li>\n</ul>\n<p><strong>[참고]</strong> <a href=\"https://blog.naver.com/backsajang420/221358585106\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">13. react-tutorial 고급 (불변성 - Immutability 개념)</a>|<strong>작성자</strong> <a href=\"https://blog.naver.com/backsajang420\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JeromeBaek</a></p>\n<h3 id=\"리액트에서의-immutability\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-immutability\" aria-label=\"리액트에서의 immutability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트에서의 Immutability</h3>\n<p>state 수정 시 setState를 통해 업데이트해야, 기존 객체의 값을 직접적으로 수정하면 안됨</p>\n<ul>\n<li>리렌더링 되지 않음 (얕은 비교하기 때문)</li>\n<li>\n<p>컴포넌트 최적화 어렵다</p>\n<ul>\n<li>배열 직접적으로 수정한 경우 <code class=\"language-text\">prev.arr !== next.arr</code>로 비교 불가능</li>\n<li>참조하는 주소 똑같이 남아있기 때문에..</li>\n</ul>\n</li>\n<li>Redux의 Reducer도 Immutability를 유지하며 동작 (새로운 state 반환!)</li>\n</ul>","fields":{"slug":"/posts/js-immutability","tagSlugs":["/tag/javascript/","/tag/react/","/tag/web-development/"]},"frontmatter":{"date":"2020-08-05T22:40:32.169Z","description":"JS의 immutability, 그리고 그것이 중요한 이유","tags":["Javascript","React","Web Development"],"title":"Immutability in JS","socialImage":""}}},"pageContext":{"slug":"/posts/js-immutability"}},"staticQueryHashes":["251939775","2703480616","401334301"]}