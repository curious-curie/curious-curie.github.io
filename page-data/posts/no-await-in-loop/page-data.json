{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/no-await-in-loop","result":{"data":{"markdownRemark":{"id":"52d358e2-396c-5527-9845-7e93338721ff","html":"<p>Performing an operation on each element of an iterable is a common task. However, performing an await as part of each operation is an indication that the program is <strong>not taking full advantage of the parallelization benefits of async/await.</strong></p>\n<p>Usually, the code should be refactored to create all the promises at once, then get access to the results using Promise.all(). Otherwise, <strong>each successive operation will not start until the previous one has completed.</strong></p>\n<p>map, forEach 안에 async-await 쓰면, map, forEach 자체는 await 하지 않기 때문에 루프 이후와 실행 순서 보장되지 않는다\n그리고 그 배열들 안에서 await이 걸려서 각각의 요청들이 parallel 하게 수행되지 않고 순차적으로 실행된다\n(우리 코드 보면 이걸 의도해서 forEach를 쓰는 경우도 있긴 하다)\n=> for … of 쓰거나, Promise.all 쓰는게 좋다. </p>\n<p>Concretely, the following function should be refactored as shown:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">things</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> thing <span class=\"token keyword\">of</span> things<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Bad: each loop iteration is delayed until the entire asynchronous operation completes</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">things</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> thing <span class=\"token keyword\">of</span> things<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Good: all asynchronous operations are immediately started.</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Now that all the asynchronous operations are running, here we wait until they all complete.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Promise-all</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n출처<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>mygumi<span class=\"token punctuation\">.</span>tistory<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span><span class=\"token number\">328</span> <span class=\"token punctuation\">[</span>마이구미의 HelloWorld<span class=\"token punctuation\">]</span></code></pre></div>","fields":{"slug":"/posts/no-await-in-loop","tagSlugs":["/tag/frontend/","/tag/javascript/","/tag/web-development/"]},"frontmatter":{"date":"2021-03-16T22:40:32.169Z","description":"eslint 룰 중에 no-await-in-loop이 있는 이유?","tags":["Frontend","Javascript","Web Development"],"title":"[JS] no-await-in-loop?","socialImage":""}}},"pageContext":{"slug":"/posts/no-await-in-loop"}},"staticQueryHashes":["251939775","2703480616","401334301"]}