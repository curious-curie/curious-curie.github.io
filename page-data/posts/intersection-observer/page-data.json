{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/intersection-observer","result":{"data":{"markdownRemark":{"id":"40bb4386-fcd6-5c34-90e3-af132e587103","html":"<h1 id=\"intersection-observer\" style=\"position:relative;\"><a href=\"#intersection-observer\" aria-label=\"intersection observer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intersection Observer</h1>\n<p>타겟 엘레멘트와 타겟의 부모 혹은 상위 엘레멘트의 뷰포트가 교차되는 부분을 비동기적으로 관찰하는 API ⇒ 결국 타겟 element가 화면에 노출되었는지 여부 구독하는 방법</p>\n<p>네이버 인턴십 1주차 과제에서 Intersection Observer을 사용한 무한스크롤을 구현했다.\n이전까지는 scroll event listener을 활용한 구현만 했었는데, 새로 알게 된 부분이라 정리해보았다. </p>\n<h3 id=\"--methods\" style=\"position:relative;\"><a href=\"#--methods\" aria-label=\"  methods permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- methods</h3>\n<p><code class=\"language-text\">IntersectionObserver.observe(target)</code>: 관찰 시작</p>\n<p><code class=\"language-text\">IntersectionObserver.unobserve(target)</code>: 관찰 종료</p>\n<p><code class=\"language-text\">IntersectionObserver.disconnect(target)</code>: 관찰 멈추기</p>\n<ol>\n<li><code class=\"language-text\">Intersection Observer</code> 객체를 생성하면서, <code class=\"language-text\">Callback Function</code> 과 <code class=\"language-text\">option</code> 을 전달한다.</li>\n<li><code class=\"language-text\">Intersection Observer</code> 에서 observe 로 구독할 <code class=\"language-text\">Target Element</code> 를 추가한다.</li>\n<li><code class=\"language-text\">Target Element</code> 가 options.threshold 로 정의한 <strong>Percent</strong>(%) 만큼 화면에 노출 혹은 제외 되면, entries 배열 에 추가하고, <code class=\"language-text\">Callback Function</code> 을 호출한다.</li>\n<li><code class=\"language-text\">Callback Function</code> 에서 전달 받은 entries 배열을 확인하면서, <strong>isIntersecting</strong> 으로 노출 여부를 확인한다.</li>\n<li>만약 더이상 <code class=\"language-text\">Target Element</code> 를 구독할 필요가 없다면, IntersectionObserver 에서 <strong>unobserve</strong> 로 제거 할 수 있다.</li>\n</ol>\n<h2 id=\"왜-쓸까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-%EC%93%B8%EA%B9%8C\" aria-label=\"왜 쓸까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 쓸까?</h2>\n<p>window.addEventListener을 이용한 스크롤 이벤트 구현할 때의 비효율성을 어느 정도 해결해준다. </p>\n<h3 id=\"1-호출-수-제한-방법-debounce-throttle을-사용하지-않아도-된다\" style=\"position:relative;\"><a href=\"#1-%ED%98%B8%EC%B6%9C-%EC%88%98-%EC%A0%9C%ED%95%9C-%EB%B0%A9%EB%B2%95-debounce-throttle%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%9C%EB%8B%A4\" aria-label=\"1 호출 수 제한 방법 debounce throttle을 사용하지 않아도 된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 호출 수 제한 방법 debounce, throttle을 사용하지 않아도 된다.</h3>\n<p><code class=\"language-text\">debounce</code>와 <code class=\"language-text\">throttle</code>은 스크롤 이벤트로 인해 발생하는 불필요한 함수 호출 수를 컨트롤할 필요가 있음.</p>\n<p>console.log가 수도없이 호출됨 </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">window.addEventListener(&#39;scroll&#39;, function() {\n   return console.log(&#39;scroll!&#39;);\n});</code></pre></div>\n<h3 id=\"2-reflow를-하지-않는다\" style=\"position:relative;\"><a href=\"#2-reflow%EB%A5%BC-%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"2 reflow를 하지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. reflow를 하지 않는다.</h3>\n<p>스크롤 이벤트에서는 현재의 높이 값을 알기 위해<code class=\"language-text\">offsetTop</code> 을 사용하는데 정확한 값을 가져오기 위해 매번 layout을 새로 그리게 된다.</p>\n<p>⇒ 렌더 트리를 재생성 하는 것이기 때문에 브라우저 성능 저하</p>","fields":{"slug":"/posts/intersection-observer","tagSlugs":["/tag/javascript/","/tag/react/","/tag/web-development/"]},"frontmatter":{"date":"2020-07-12T22:40:32.169Z","description":"타겟 엘레멘트와 타겟의 부모 혹은 상위 엘레멘트의 뷰포트가 교차되는 부분을 비동기적으로 관찰하는 API, 결국 타겟 element가 화면에 노출되었는지 여부 구독하는 방법","tags":["Javascript","React","Web Development"],"title":"Intersection Observer","socialImage":""}}},"pageContext":{"slug":"/posts/intersection-observer"}},"staticQueryHashes":["251939775","2703480616","401334301"]}