{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/shell-bashrc","result":{"data":{"markdownRemark":{"id":"233b174c-736a-57de-b4f7-5c763ddef84d","html":"<h1 id=\"shell-bashrc-bash_profile\" style=\"position:relative;\"><a href=\"#shell-bashrc-bash_profile\" aria-label=\"shell bashrc bash_profile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shell, bashrc, bash_profile</h1>\n<p>환경변수 지정할 때 .bashrc, bash_profile 등 얘기가 나오는데 생각없이 쓰다가 도대체 이것들이 뭔가… 싶어서 정리해본 글.</p>\n<h2 id=\"kernel\" style=\"position:relative;\"><a href=\"#kernel\" aria-label=\"kernel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kernel</h2>\n<p>운영 체제의 핵심 부분</p>\n<p>소프트웨어와 하드웨어 간의 커뮤니케이션 관리 </p>\n<blockquote>\n<p>운영체제에서 가장 중요한 구성요소로서 입출력을 관리하고 소프트웨어로부터의 요청을 컴퓨터에 있는 하드웨어(CPU, 메모리, 저장장치등)가 처리 할 수 있도록 요청을 변환하는 역할을 한다</p>\n</blockquote>\n<p><a href=\"https://jinshine.github.io/2018/05/10/%EC%BB%B4%ED%93%A8%ED%84%B0%20%EA%B8%B0%EC%B4%88/%EC%BB%A4%EB%84%90(Kernel)%EA%B3%BC%20%EC%89%98(Shell)/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">커널(Kernel)과 쉘(Shell)</a></p>\n<h2 id=\"shell\" style=\"position:relative;\"><a href=\"#shell\" aria-label=\"shell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shell</h2>\n<p>운영체제와 커널을 이어주는 역할</p>\n<p>운영체제 바깥쪽에서 명령어를 해석해서 커널에 전달해주는 역할 </p>\n<h3 id=\"bash\" style=\"position:relative;\"><a href=\"#bash\" aria-label=\"bash permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bash</h3>\n<p>Bourne Again Shell (기존 unix shell program인 sh의 enhanced version)</p>\n<p>리눅스에서 가장 널리 사용되는 쉘</p>\n<ul>\n<li>/etc/profile</li>\n<li>/etc/bashrc</li>\n<li>~/.bash_profile</li>\n<li>~/.bashrc</li>\n<li>~/.bash_logout</li>\n</ul>\n<p>출처: <a href=\"https://originalchoi.tistory.com/19\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://originalchoi.tistory.com/19</a></p>\n<ul>\n<li>Interactive Shell</li>\n</ul>\n<p>non-option arguments 없이 실행된 shell </p>\n<p>사용자로부터 프롬프트를 통해 직접 명령을 입력받아 실행</p>\n<ul>\n<li>Non-interactive Shell</li>\n</ul>\n<p>작성한 script 파일을 실행시키는 것 등</p>\n<ul>\n<li>Login shell</li>\n<li>Non-login shell</li>\n<li><strong>Invoked as an interactive login shell, or with —login</strong></li>\n<li>여기서 login shell? 사용자가 로그인했을 때 적용되는 shell </li>\n</ul>\n<p>interactive login shell로서 (혹은 —login 옵션으로 non-interactive shell로서) Bash 실행 시 /etc/profile 파일 먼저 읽고 실행</p>\n<p>/etc/profile 읽은 후 <strong>/.bash_profile,</strong> ~/.bash_login, ~/.profile 탐색하고 그 순서로 읽고 실행</p>\n<p>⇒ 콘솔 통해 로그인하면 (ssh 통해서든 컴에 입력해서든) .bash_profile이 실행됨</p>\n<ul>\n<li><strong>Invoked as an interactive non-login shell</strong></li>\n</ul>\n<p><strong>~/.bashrc</strong> 읽고 실행 </p>\n<p>⇒ 이미 로그인 되어있는 상태에서 새로운 터미널 윈도우 열면 .bashrc가 실행됨.</p>\n<p>OSX에선 새로운 탭이나 윈도우를 킬 때마다 login shell 인 것처럼 실행시킨다고 함 ⇒ bash_profile 사용이 권장됨</p>\n<p>그리고 이렇게 추가해서 bash_profile에서 bashrc까지 가져오게 하는 게 추천됨</p>\n<p><a href=\"http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bash<em>profile</em>vs.html</a></p>\n<blockquote>\n<p>Most of the time you don’t want to maintain two separate config files for login and non-login shells — when you set a PATH, you want it to apply to both. You can fix this by sourcing .bashrc from your .bash_profile file, then putting PATH and common settings in .bashrc.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if [ -f ~/.bashrc ]; then\n    source ~/.bashrc\nfi</code></pre></div>\n<p>references</p>\n<p><a href=\"https://webdir.tistory.com/126\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://webdir.tistory.com/126</a></p>","fields":{"slug":"/posts/shell-bashrc","tagSlugs":["/tag/cs/","/tag/general/"]},"frontmatter":{"date":"2020-06-01T22:40:32.169Z","description":"환경변수 지정할 때 .bashrc, bash_profile 등 얘기가 나오는데 생각없이 쓰다가 도대체 이것들이 뭔가... 싶어서 정리해본 글. ","tags":["CS","general"],"title":"Shell, bashrc, bash_profile?","socialImage":null}}},"pageContext":{"slug":"/posts/shell-bashrc"}},"staticQueryHashes":["251939775","2703480616","401334301"]}